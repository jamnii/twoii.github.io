

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://192.168.222.128:4001/</id>
  <title>Jamnii Shao</title>
  <subtitle>Jamnii Shao, a old person of low spirited.</subtitle>
  <updated>2021-12-22T20:10:48+08:00</updated>
  <author>
    <name>Jamnii Shao</name>
    <uri>http://192.168.222.128:4001/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://192.168.222.128:4001/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://192.168.222.128:4001/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2021 Jamnii Shao </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>CGI、FastCGI、PHP-FPM、Reactor、I/O复用模型</title>
    <link href="http://192.168.222.128:4001/posts/php-fpm-other/" rel="alternate" type="text/html" title="CGI、FastCGI、PHP-FPM、Reactor、I/O复用模型" />
    <published>2021-02-25T00:00:00+08:00</published>
  
    <updated>2021-02-25T00:00:00+08:00</updated>
  
    <id>http://192.168.222.128:4001/posts/php-fpm-other/</id>
    <content src="http://192.168.222.128:4001/posts/php-fpm-other/" />
    <author>
      <name>Jamnii Shao</name>
    </author>

  
    
    <category term="CGI" />
    
  

  
    <summary>
      





      CGI、FastCGI、PHP-FPM、Reactor、I/O复用模型

CGI

common gateway interface (公共网关接口)


  请求模式:
        Web Brower(浏览器) —-(通过http协议传输)—-&amp;gt; Http Server(服务器nginx/apache) —–&amp;gt; CGI Program —–&amp;gt; Db

  Server 与 CGI 通过 STDIN/STDOUT(标准的输入/输出)进行数据传递

  nginx(动态加载模块) apache(指定加载模块)


CGI工作原理


  每当客户请求CGI的时候，WEB服务器就请求操作系统生成一个新的CGI解释器进程(如php-cgi.exe)，

  CGI 的一个进程则处理完一个请求后退出，下一个请求来时再创建新进程。

  当然，这样在访问量很少没有并发的...
    </summary>
  

  </entry>

  
  <entry>
    <title>MySQL Transaction</title>
    <link href="http://192.168.222.128:4001/posts/mysql-transaction/" rel="alternate" type="text/html" title="MySQL Transaction" />
    <published>2021-02-20T16:42:00+08:00</published>
  
    <updated>2021-02-20T16:42:00+08:00</updated>
  
    <id>http://192.168.222.128:4001/posts/mysql-transaction/</id>
    <content src="http://192.168.222.128:4001/posts/mysql-transaction/" />
    <author>
      <name>Jamnii Shao</name>
    </author>

  
    
    <category term="MySQL" />
    
  

  
    <summary>
      





      MySQL 事务主要用于处理操作量大，复杂度高的数据。

1. 基础介绍

2. ACID

Atomicity
原子性: 一个事务被视为一个不可分割的最小工作单元 一个事务中的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。

事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样。

原子性关注状态，要么全部成功，要么全部失败，不存在部分成功的状态

Consistency
一致性: 在事务开始之前和事务结束以后，数据库数据的一致性约束没有被破坏。 保证在一个事务中的多次操作的数据中间状态,对其他事务不可见的。

因为这些中间状态，是一个过渡状态，与事务的开始状态和事务的结束状态是不一致的，一致性关注数据的可见性，中间状态的数据对外部不可见，只有最初状态和最终状态的数据对外可见。

(memberA 向 memberB 转 100,在...
    </summary>
  

  </entry>

  
  <entry>
    <title>Getting Started</title>
    <link href="http://192.168.222.128:4001/posts/getting-start/" rel="alternate" type="text/html" title="Getting Started" />
    <published>2019-08-09T20:55:00+08:00</published>
  
    <updated>2019-08-10T04:55:00+08:00</updated>
  
    <id>http://192.168.222.128:4001/posts/getting-start/</id>
    <content src="http://192.168.222.128:4001/posts/getting-start/" />
    <author>
      <name>Jamnii Shao</name>
    </author>

  
    
    <category term="Blogging" />
    
    <category term="Tutorial" />
    
  

  
    <summary>
      





      
  Prerequisites
  Installation    
      Creating a New Site        
          Option 1. Using the Chirpy Starter
          Option 2. Forking on GitHub
        
      
      Installing Dependencies
    
  
  Usage    
      Configuration
      Customing Stylesheet
      Running Local Server
      Deployment        
          Deploy by Using Github Actions
          Manually Build and Deploy
  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>How to build you apis</title>
    <link href="http://192.168.222.128:4001/posts/how-to-build-api/" rel="alternate" type="text/html" title="How to build you apis" />
    <published>2017-11-12T00:00:00+08:00</published>
  
    <updated>2017-11-12T00:00:00+08:00</updated>
  
    <id>http://192.168.222.128:4001/posts/how-to-build-api/</id>
    <content src="http://192.168.222.128:4001/posts/how-to-build-api/" />
    <author>
      <name>Jamnii Shao</name>
    </author>

  
    
    <category term="api" />
    
  

  
    <summary>
      





      如何构建自己的api，即不臃肿，也不让人讨厌！

1  : 数据构建

快速构建安全可用的基础数据，fork data，保证 api 数据完整性！

2  : 规划和创造端点

端点理论:将操作计划转换为实际端点需要的功能(参照:REST-FULL API的理论和命名约定的最佳实践)
API资源应该避免输出自增变量,而是唯一标识
TDD[测试驱动开发（Test-Driven Development）]开发模式

2.1 POST 和 PUT 的区别!

PUT是在您事先知道整个URL并且操作是幂等的情况下使用的。(幂等性是一个很花哨的词，意思是“可以一遍又一遍地做而不会产生不同的结果”)
复数、单数还是两者都有?( /user/1[用户1的信息]  /users[所有用户|1,2用户信息])
一个谓词是一个操作,一个执行术语,我们的API只需要一个谓词—HTTP方法。所有其他动词都需...
    </summary>
  

  </entry>

  
  <entry>
    <title>高内聚低耦合</title>
    <link href="http://192.168.222.128:4001/posts/hight-low-design/" rel="alternate" type="text/html" title="高内聚低耦合" />
    <published>2017-03-15T00:00:00+08:00</published>
  
    <updated>2017-03-05T16:42:00+08:00</updated>
  
    <id>http://192.168.222.128:4001/posts/hight-low-design/</id>
    <content src="http://192.168.222.128:4001/posts/hight-low-design/" />
    <author>
      <name>Jamnii Shao</name>
    </author>

  
    
    <category term="Design" />
    
  

  
    <summary>
      





      模块之间存在依赖， 导致改动可能会互相影响， 关系越紧密， 耦合越强， 模块独立性越差。
模块内部的元素，关联性越强， 则内聚越高， 模块单一性更强。

模块

模块就是从逻辑上将系统分解为更细微的部分， 分而治之， 复杂问题拆解为若干简单问题， 逐个解决。

耦合主要描述模块之间的关系， 内聚主要描述模块内部。 模块的粒度可大可小， 可以是函数， 类， 功能块等等。

耦合

模块之间存在依赖， 导致改动可能会互相影响， 关系越紧密， 耦合越强， 模块独立性越差。

比如模块A直接操作了模块B中数据， 则视为强耦合， 若A只是通过数据与模块B交互， 则视为弱耦合。

独立的模块便于扩展， 维护， 写单元测试， 如果模块之间重重依赖， 会极大降低开发效率。



内聚

模块内部的元素， 关联性越强， 则内聚越高， 模块单一性更强。 一个模块应当尽可能独立完成某个功能，

如果有各种...
    </summary>
  

  </entry>

</feed>



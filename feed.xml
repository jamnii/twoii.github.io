

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4001/</id>
  <title>JiaMing Shao</title>
  <subtitle>JiaMing Shao, an old person of low-spirited.</subtitle>
  <updated>2023-03-13T10:36:18+08:00</updated>
  <author>
    <name>JiaMing Shao</name>
    <uri>http://0.0.0.0:4001/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4001/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://0.0.0.0:4001/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2023 JiaMing Shao </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>CGI、FastCGI、PHP-FPM、Reactor、I/O复用模型</title>
    <link href="http://0.0.0.0:4001/posts/php-fpm-other/" rel="alternate" type="text/html" title="CGI、FastCGI、PHP-FPM、Reactor、I/O复用模型" />
    <published>2021-02-25T00:00:00+08:00</published>
  
    <updated>2021-02-25T00:00:00+08:00</updated>
  
    <id>http://0.0.0.0:4001/posts/php-fpm-other/</id>
    <content src="http://0.0.0.0:4001/posts/php-fpm-other/" />
    <author>
      <name>JiaMing Shao</name>
    </author>

  
    
    <category term="CGI" />
    
  

  
    <summary>
      





      CGI、FastCGI、PHP-FPM、Reactor、I/O复用模型

CGI

common gateway interface (公共网关接口)


  请求模式:
        Web Brower(浏览器) —-(通过http协议传输)—-&amp;gt; Http Server(服务器nginx/apache) —–&amp;gt; CGI Program —–&amp;gt; Db

  Server 与 CGI 通过 STDIN/STDOUT(标准的输入/输出)进行数据传递

  nginx(动态加载模块) apache(指定加载模块)


CGI工作原理


  每当客户请求CGI的时候，WEB服务器就请求操作系统生成一个新的CGI解释器进程(如php-cgi.exe)，

  CGI 的一个进程则处理完一个请求后退出，下一个请求来时再创建新进程。

  当然，这样在访问量很少没有并发的...
    </summary>
  

  </entry>

  
  <entry>
    <title>MySQL Transaction</title>
    <link href="http://0.0.0.0:4001/posts/mysql-transaction/" rel="alternate" type="text/html" title="MySQL Transaction" />
    <published>2021-02-20T16:42:00+08:00</published>
  
    <updated>2021-02-20T16:42:00+08:00</updated>
  
    <id>http://0.0.0.0:4001/posts/mysql-transaction/</id>
    <content src="http://0.0.0.0:4001/posts/mysql-transaction/" />
    <author>
      <name>JiaMing Shao</name>
    </author>

  
    
    <category term="MySQL" />
    
  

  
    <summary>
      





      MySQL 事务主要用于处理操作量大，复杂度高的数据。

1. 基础介绍

2. ACID

Atomicity
原子性: 一个事务被视为一个不可分割的最小工作单元 一个事务中的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。

事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样。

原子性关注状态，要么全部成功，要么全部失败，不存在部分成功的状态

Consistency
一致性: 在事务开始之前和事务结束以后，数据库数据的一致性约束没有被破坏。 保证在一个事务中的多次操作的数据中间状态,对其他事务不可见的。

因为这些中间状态，是一个过渡状态，与事务的开始状态和事务的结束状态是不一致的，一致性关注数据的可见性，中间状态的数据对外部不可见，只有最初状态和最终状态的数据对外可见。

(memberA 向 memberB 转 100,在...
    </summary>
  

  </entry>

  
  <entry>
    <title>MySql Locks</title>
    <link href="http://0.0.0.0:4001/posts/mysql-locks/" rel="alternate" type="text/html" title="MySql Locks" />
    <published>2021-02-06T00:00:00+08:00</published>
  
    <updated>2021-12-23T14:26:08+08:00</updated>
  
    <id>http://0.0.0.0:4001/posts/mysql-locks/</id>
    <content src="http://0.0.0.0:4001/posts/mysql-locks/" />
    <author>
      <name>JiaMing Shao</name>
    </author>

  
    
    <category term="MySQL" />
    
  

  
    <summary>
      





      锁是计算机协调多个进程或线程并发访问某一资源的机制。锁保证数据并发访问的一致性、有效性；锁冲突也是影响数据库并发访问性能的一个重要因素。锁是Mysql在服务器层和存储引擎层的的并发控制。
加锁是消耗资源的，锁的各种操作，包括获得锁、检测锁是否已解除、释放锁等。

锁的类型
这里主要介绍表锁和行锁。

表锁
表锁由 MySQL Server 实现，一般在执行 DDL(Data Definition Language) 语句时会对整个表进行加锁，
比如说 ALTER,UPDATE TABLE 等操作。
在执行 SQL 语句时，也可以明确指定对某个表进行加锁。
表锁使用的是一次性锁技术,只能访问加锁的表，不能访问其他表，直到最后通过 unlock tables 释放所有表锁
|-------
| read  |
|--------------------------------------...
    </summary>
  

  </entry>

  
  <entry>
    <title>Getting Started</title>
    <link href="http://0.0.0.0:4001/posts/getting-start/" rel="alternate" type="text/html" title="Getting Started" />
    <published>2019-08-09T20:55:00+08:00</published>
  
    <updated>2019-08-10T04:55:00+08:00</updated>
  
    <id>http://0.0.0.0:4001/posts/getting-start/</id>
    <content src="http://0.0.0.0:4001/posts/getting-start/" />
    <author>
      <name>JiaMing Shao</name>
    </author>

  
    
    <category term="Blogging" />
    
    <category term="Tutorial" />
    
  

  
    <summary>
      





      
  Prerequisites
  Installation    
      Creating a New Site        
          Option 1. Using the Chirpy Starter
          Option 2. Forking on GitHub
        
      
      Installing Dependencies
    
  
  Usage    
      Configuration
      Customing Stylesheet
      Running Local Server
      Deployment        
          Deploy by Using Github Actions
          Manually Build and Deploy
  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>How to build you apis</title>
    <link href="http://0.0.0.0:4001/posts/how-to-build-api/" rel="alternate" type="text/html" title="How to build you apis" />
    <published>2017-11-12T00:00:00+08:00</published>
  
    <updated>2017-11-12T00:00:00+08:00</updated>
  
    <id>http://0.0.0.0:4001/posts/how-to-build-api/</id>
    <content src="http://0.0.0.0:4001/posts/how-to-build-api/" />
    <author>
      <name>JiaMing Shao</name>
    </author>

  
    
    <category term="api" />
    
  

  
    <summary>
      





      如何构建自己的api，即不臃肿，也不让人讨厌！

1  : 数据构建

快速构建安全可用的基础数据，fork data，保证 api 数据完整性！

2  : 规划和创造端点

端点理论:将操作计划转换为实际端点需要的功能(参照:REST-FULL API的理论和命名约定的最佳实践)
API资源应该避免输出自增变量,而是唯一标识
TDD[测试驱动开发（Test-Driven Development）]开发模式

2.1 POST 和 PUT 的区别!

PUT是在您事先知道整个URL并且操作是幂等的情况下使用的。(幂等性是一个很花哨的词，意思是“可以一遍又一遍地做而不会产生不同的结果”)
复数、单数还是两者都有?( /user/1[用户1的信息]  /users[所有用户|1,2用户信息])
一个谓词是一个操作,一个执行术语,我们的API只需要一个谓词—HTTP方法。所有其他动词都需...
    </summary>
  

  </entry>

</feed>


